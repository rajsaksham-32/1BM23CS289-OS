#include<stdio.h>

void roundRobin(int n, int bt[], int at[], int quantum) {
    int rem_bt[n], wt[n], tat[n], ct[n], completed = 0;
    int time = 0, i;
    int done;

    for(i = 0; i < n; i++) 
        rem_bt[i] = bt[i];
    
    while(completed != n) {
        done = 1;

        for(i = 0; i < n; i++) {
            if(rem_bt[i] > 0 && at[i] <= time) {
                done = 0;

                if(rem_bt[i] > quantum) {
                    time += quantum;
                    rem_bt[i] -= quantum;
                } else {
                    time += rem_bt[i];
                    ct[i] = time;
                    rem_bt[i] = 0;
                    completed++;
                }
            }
        }

        if(done == 1) {
            time++;
        }
    }

    for(i = 0; i < n; i++) {
        tat[i] = ct[i] - at[i];
        wt[i] = tat[i] - bt[i];
    }

    printf("\nProcess\tArrival time\tBurst time\tCompleted time\tTurnAroundTime\tWaiting Time\n");
    for(i = 0; i < n; i++) {
        printf("%d\t%d\t\t%d\t\t%d\t\t%d\t\t%d\n", i + 1, at[i], bt[i], ct[i], tat[i], wt[i]);
    }
}

int main() {
    int n = 4;
    int bt[] = {5, 4, 2, 1};
    int at[] = {0, 1, 2, 3};
    int quantum = 2;

    roundRobin(n, bt, at, quantum);
    return 0;
}
